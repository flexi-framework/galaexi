!=================================================================================================================================
! Copyright (c) 2010-2016  Prof. Claus-Dieter Munz
! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/
!
! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
!
! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.
!=================================================================================================================================
#include "flexi.h"

!==================================================================================================================================
!> Interpolates the interior volume data (stored at the Gauss or Gauss-Lobatto points) to the surface
!> integration points, using fast 1D Interpolation and store in global side structure
!==================================================================================================================================
PPURE SUBROUTINE ProlongToFace(&
#ifdef WITHnVar
    TP_nVar,&
#endif
    Nloc,Uvol,Uface_master,Uface_slave,L_Minus,L_Plus,doMPISides &
)
! MODULES
USE MOD_Mesh_Vars,          ONLY: nElems
USE MOD_Mesh_Vars,          ONLY: SideToElem
USE MOD_Mesh_Vars,          ONLY: firstMPISide_YOUR, lastMPISide_MINE, nSides
USE MOD_Mesh_Vars,          ONLY: S2V2
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN)              :: TP_nVar
#endif
INTEGER,INTENT(IN)              :: Nloc
REAL,INTENT(IN)                 :: Uvol(TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)
REAL,INTENT(INOUT)              :: Uface_master(TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,INTENT(INOUT)              :: Uface_slave( TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,INTENT(IN)                 :: L_Minus(0:Nloc),L_Plus(0:Nloc)
LOGICAL,INTENT(IN)              :: doMPISides  != .TRUE. only YOUR MPISides are filled, =.FALSE. BCSides +InnerSides +MPISides MINE
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER                         :: p,q,firstSideID,lastSideID
INTEGER                         :: ElemID,nbElemID,locSide,nblocSide,SideID,flip
REAL                            :: Uface(TP_nVar,0:Nloc,0:ZDIM(Nloc))
!==================================================================================================================================

IF(doMPISides)THEN
  firstSideID = firstMPISide_YOUR
   lastSideID = nSides
ELSE
  firstSideID = 1
   lastSideID =  lastMPISide_MINE
END IF

DO SideID=firstSideID,lastSideID
  ElemID    = SideToElem(S2E_ELEM_ID,SideID)
  nbElemID  = SideToElem(S2E_NB_ELEM_ID,SideID)

  !master sides
  IF(ElemID.GT.0)THEN
    locSide = SideToElem(S2E_LOC_SIDE_ID,SideID)
    flip    = 0

    IF(PP_NodeType.EQ.1)THEN
      CALL EvalElemFaceG(&
#if WITHnVar
          TP_nVar,&
#endif
          Nloc,UVol(:,:,:,:,ElemID),Uface,L_Minus,L_Plus,locSide)
    ELSE
      CALL EvalElemFaceGL(&
#if WITHnVar
          TP_nVar,&
#endif
          Nloc,UVol(:,:,:,:,ElemID),Uface,locSide)
    END IF

    DO q=0,ZDIM(Nloc); DO p=0,Nloc
      Uface_master(:,p,q,SideID)=Uface(:,S2V2(1,p,q,0,locSide),S2V2(2,p,q,0,locSide))
    END DO; END DO
  END IF

  !slave side (ElemID,locSide and flip =-1 if not existing)
  IF(nbElemID.GT.0)THEN
    nblocSide = SideToElem(S2E_NB_LOC_SIDE_ID,SideID)
    flip      = SideToElem(S2E_FLIP,SideID)

    IF(PP_NodeType.EQ.1)THEN
      CALL EvalElemFaceG(&
#if WITHnVar
          TP_nVar,&
#endif
          Nloc,UVol(:,:,:,:,nbElemID),Uface,L_Minus,L_Plus,nblocSide)
    ELSE
      CALL EvalElemFaceGL(&
#if WITHnVar
          TP_nVar,&
#endif
          Nloc,UVol(:,:,:,:,nbElemID),Uface,nblocSide)
    END IF

    DO q=0,ZDIM(Nloc); DO p=0,Nloc
      Uface_slave( :,p,q,SideID)=Uface(:,S2V2(1,p,q,flip,nblocSide),S2V2(2,p,q,flip,nblocSide))
    END DO; END DO
  END IF
END DO
END SUBROUTINE ProlongToFace

!==================================================================================================================================
!> Interpolates the interior volume data (stored at the Gauss or Gauss-Lobatto points) to the surface
!> integration points, using fast 1D Interpolation and store in global side structure
!==================================================================================================================================
PPURE SUBROUTINE ProlongToFace_CUDA(&
#ifdef WITHnVar
    TP_nVar,&
#endif
    Nloc,d_Uvol,d_Uface_master,d_Uface_slave,d_L_Minus,d_L_Plus)
! MODULES
USE MOD_Mesh_Vars,          ONLY: nElems
USE MOD_Mesh_Vars,          ONLY: firstMPISide_YOUR, lastMPISide_MINE, nSides
USE MOD_Mesh_Vars,          ONLY: d_S2V2, d_ElemToSide
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,VALUE,INTENT(IN)        :: TP_nVar
#endif
INTEGER,VALUE,INTENT(IN)        :: Nloc
REAL,DEVICE,INTENT(IN)          :: d_Uvol(TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)
REAL,DEVICE,INTENT(INOUT)       :: d_Uface_master(TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,DEVICE,INTENT(INOUT)       :: d_Uface_slave( TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,DEVICE,INTENT(IN)          :: d_L_Minus(0:Nloc),d_L_Plus(0:Nloc)
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER             :: nDOF
INTEGER,PARAMETER   :: nThreads=128
!==================================================================================================================================
nDOF = nElems*6*(Nloc+1)*(ZDIM(Nloc)+1)
#if (PP_NodeType==1)
CALL EvalElemFaceG_Device<<<nDOF/nThreads+1,nThreads>>>(&
#ifdef WITHnVar
             TP_nVar,&
#endif
             Nloc,nSides,nElems,d_Uvol,d_Uface_master,d_Uface_slave,d_L_Minus,d_L_Plus,d_ElemToSide,d_S2V2)
#else
CALL EvalElemFaceG_Device<<<nDOF/nThreads+1,nThreads>>>(&
#ifdef WITHnVar
             TP_nVar,&
#endif
             Nloc,nSides,nElems,d_Uvol,d_Uface_master,d_Uface_slave,d_ElemToSide,d_S2V2)
#endif
END SUBROUTINE ProlongToFace_CUDA

!==================================================================================================================================
!> Interpolates the interior volume data (stored at the Gauss or Gauss-Lobatto points) to the surface
!> integration points, using fast 1D Interpolation and store in global side structure
!==================================================================================================================================
PPURE ATTRIBUTES(GLOBAL) SUBROUTINE EvalElemFaceG_Device(&
#ifdef WITHnVar
             TP_nVar,&
#endif
             Nloc,nSides,nElems,Uvol,Uface_master,Uface_slave,L_Minus,L_Plus,ElemToSide,S2V2)
! MODULES
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,VALUE,INTENT(IN)        :: TP_nVar
#endif
INTEGER,VALUE,INTENT(IN)        :: Nloc
INTEGER,VALUE,INTENT(IN)        :: nSides
INTEGER,VALUE,INTENT(IN)        :: nElems
REAL,INTENT(IN)                 :: Uvol(TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)
REAL,INTENT(INOUT)              :: Uface_master(TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,INTENT(INOUT)              :: Uface_slave( TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,INTENT(IN)                 :: L_Minus(0:Nloc),L_Plus(0:Nloc)
INTEGER,INTENT(IN)              :: ElemToSide(3,6,nElems)
!INTEGER,INTENT(IN)              :: SideToElem(5,nSides)
INTEGER,INTENT(IN)              :: S2V2(2,0:Nloc,0:Nloc,0:4,6)
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER                         :: p,q
INTEGER                         :: i,j,l,rest
INTEGER                         :: ElemID,locSideID,SideID,flip,threadID
REAL                            :: Uface(TP_nVar)
LOGICAL                         :: isMaster
!==================================================================================================================================
! Get thread indices
threadID = (blockidx%x-1) * blockdim%x + threadidx%x
! Get ElemID of current thread
ElemID   =        (threadID-1)/((Nloc+1)**2*6)+1 ! Elems are 1-indexed
rest     = threadID-(ElemID-1)*((Nloc+1)**2*6)
! Get locSideID
locSideID= (rest-1)            /(Nloc+1)**2+1 ! locSideID is 1-indexed
rest     =  rest- (locSideID-1)*(Nloc+1)**2
! Get pq indices of current thread
p        = (rest-1)/(Nloc+1)!**1
rest     =  rest- p*(Nloc+1)!**1
q        = (rest-1)!/(Nloc+1)**0
rest     =  rest- q!*(Nloc+1)**0

IF (ElemID.LE.nElems) THEN
  SideID   = ElemToSide(E2S_SIDE_ID  ,locSideID,ElemID)
  flip     = ElemToSide(E2S_FLIP     ,locSideID,ElemID)
  isMaster = flip.EQ.0 ! master side has flip=0, slave sides flip!=0

  ! Get 2D position in the two non-prolongated dimensions in volume coords
  i = S2V2(1,p,q,flip,locSideID) ! First  index to evaluate volume solution at
  j = S2V2(2,p,q,flip,locSideID) ! Second index to evaluate volume solution at

  ! Eval pointwise
  SELECT CASE(locSideID)
  CASE(XI_MINUS)
    Uface=Uvol(:,0,i,j,ElemID)*L_Minus(0)
    DO l=1,Nloc
      Uface=Uface+Uvol(:,l,i,j,ElemID)*L_Minus(l)
    END DO ! l
  CASE(ETA_MINUS)
    Uface=Uvol(:,i,0,j,ElemID)*L_Minus(0)
    DO l=1,Nloc
      Uface=Uface+Uvol(:,i,l,j,ElemID)*L_Minus(l)
    END DO ! l
  CASE(ZETA_MINUS)
    Uface=Uvol(:,i,j,0,ElemID)*L_Minus(0)
    DO l=1,Nloc
      Uface=Uface+Uvol(:,i,j,l,ElemID)*L_Minus(l)
    END DO ! l
  CASE(XI_PLUS)
    Uface=Uvol(:,0,i,j,ElemID)*L_Plus(0)
    DO l=1,Nloc
      Uface=Uface+Uvol(:,l,i,j,ElemID)*L_Plus(l)
    END DO ! l
  CASE(ETA_PLUS)
    Uface=Uvol(:,i,0,j,ElemID)*L_Plus(0)
    DO l=1,Nloc
      Uface=Uface+Uvol(:,i,l,j,ElemID)*L_Plus(l)
    END DO ! l
  CASE(ZETA_PLUS)
    Uface=Uvol(:,i,j,0,ElemID)*L_Plus(0)
    DO l=1,Nloc
      Uface=Uface+Uvol(:,i,j,l,ElemID)*L_Plus(l)
    END DO ! l
  END SELECT

  ! Write to correct array
  IF (isMaster) THEN
    Uface_master(:,p,q,SideID)=Uface(:)
  ELSE
    Uface_slave( :,p,q,SideID)=Uface(:)
  END IF
END IF

END SUBROUTINE EvalElemFaceG_Device

!==================================================================================================================================
!> Interpolates the interior volume data (stored at the Gauss or Gauss-Lobatto points) to the surface
!> integration points, using fast 1D Interpolation and store in global side structure
!==================================================================================================================================
PPURE ATTRIBUTES(GLOBAL) SUBROUTINE EvalElemFaceGL_Device(&
#ifdef WITHnVar
             TP_nVar,&
#endif
             Nloc,nSides,nElems,Uvol,Uface_master,Uface_slave,ElemToSide,S2V2)
! MODULES
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,VALUE,INTENT(IN)        :: TP_nVar
#endif
INTEGER,VALUE,INTENT(IN)        :: Nloc
INTEGER,VALUE,INTENT(IN)        :: nSides
INTEGER,VALUE,INTENT(IN)        :: nElems
REAL,INTENT(IN)                 :: Uvol(TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)
REAL,INTENT(INOUT)              :: Uface_master(TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
REAL,INTENT(INOUT)              :: Uface_slave( TP_nVar,0:Nloc,0:ZDIM(Nloc),1:nSides)
INTEGER,INTENT(IN)              :: ElemToSide(3,6,nElems)
!INTEGER,INTENT(IN)              :: SideToElem(5,nSides)
INTEGER,INTENT(IN)              :: S2V2(2,0:Nloc,0:Nloc,0:4,6)
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER                         :: p,q
INTEGER                         :: i,j,l,rest
INTEGER                         :: ElemID,locSideID,SideID,flip,threadID
REAL                            :: Uface(TP_nVar)
LOGICAL                         :: isMaster
!==================================================================================================================================
! Get thread indices
threadID = (blockidx%x-1) * blockdim%x + threadidx%x
! Get ElemID of current thread
ElemID   =        (threadID-1)/((Nloc+1)**2*6)+1 ! Elems are 1-indexed
rest     = threadID-(ElemID-1)*((Nloc+1)**2*6)
! Get locSideID
locSideID= (rest-1)            /(Nloc+1)**2+1 ! locSideID is 1-indexed
rest     =  rest- (locSideID-1)*(Nloc+1)**2
! Get pq indices of current thread
p        = (rest-1)/(Nloc+1)!**1
rest     =  rest- p*(Nloc+1)!**1
q        = (rest-1)!/(Nloc+1)**0
rest     =  rest- q!*(Nloc+1)**0

IF (ElemID.LE.nElems) THEN
  SideID   = ElemToSide(E2S_SIDE_ID  ,locSideID,ElemID)
  flip     = ElemToSide(E2S_FLIP     ,locSideID,ElemID)
  isMaster = flip.EQ.0 ! master side has flip=0, slave sides flip!=0

  ! Get 2D position in the two non-prolongated dimensions in volume coords
  i = S2V2(1,p,q,flip,locSideID) ! First  index to evaluate volume solution at
  j = S2V2(2,p,q,flip,locSideID) ! Second index to evaluate volume solution at

  ! Eval pointwise
  SELECT CASE(locSideID)
  CASE(XI_MINUS)
    Uface=Uvol(:,0,i,j,ElemID)
  CASE(ETA_MINUS)
    Uface=Uvol(:,i,0,j,ElemID)
  CASE(ZETA_MINUS)
    Uface=Uvol(:,i,j,0,ElemID)
  CASE(XI_PLUS)
    Uface=Uvol(:,Nloc,i,j,ElemID)
  CASE(ETA_PLUS)
    Uface=Uvol(:,i,Nloc,j,ElemID)
  CASE(ZETA_PLUS)
    Uface=Uvol(:,i,j,Nloc,ElemID)
  END SELECT

  ! Write to correct array
  IF (isMaster) THEN
    Uface_master(:,p,q,SideID)=Uface(:)
  ELSE
    Uface_slave( :,p,q,SideID)=Uface(:)
  END IF
END IF

END SUBROUTINE EvalElemFaceGL_Device

!==================================================================================================================================
!> Interpolates the element volume data stored at Gauss points
!==================================================================================================================================
PPURE SUBROUTINE EvalElemFaceG(&
#ifdef WITHnVar
    TP_nVar,&
#endif
    Nloc,Uvol,Uface,L_Minus,L_Plus,locSide)
! MODULES
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN)              :: TP_nVar
#endif
INTEGER,INTENT(IN)              :: Nloc
INTEGER,INTENT(IN)              :: locSide
REAL,INTENT(IN)                 :: L_Minus(0:Nloc),L_Plus(0:Nloc)
REAL,INTENT(IN)                 :: Uvol( TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc))
REAL,INTENT(OUT)                :: Uface(TP_nVar,0:Nloc,0:ZDIM(Nloc))
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER                         :: l
!==================================================================================================================================
SELECT CASE(locSide)
CASE(XI_MINUS)
  Uface=Uvol(:,0,:,:)*L_Minus(0)
  DO l=1,Nloc
    Uface=Uface+Uvol(:,l,:,:)*L_Minus(l)
  END DO ! l
CASE(ETA_MINUS)
  Uface=Uvol(:,:,0,:)*L_Minus(0)
  DO l=1,Nloc
    Uface=Uface+Uvol(:,:,l,:)*L_Minus(l)
  END DO ! l
CASE(ZETA_MINUS)
  Uface=Uvol(:,:,:,0)*L_Minus(0)
  DO l=1,Nloc
    Uface=Uface+Uvol(:,:,:,l)*L_Minus(l)
  END DO ! l
CASE(XI_PLUS)
  Uface=Uvol(:,0,:,:)*L_Plus(0)
  DO l=1,Nloc
    Uface=Uface+Uvol(:,l,:,:)*L_Plus(l)
  END DO ! l
CASE(ETA_PLUS)
  Uface=Uvol(:,:,0,:)*L_Plus(0)
  DO l=1,Nloc
    Uface=Uface+Uvol(:,:,l,:)*L_Plus(l)
  END DO ! l
CASE(ZETA_PLUS)
  Uface=Uvol(:,:,:,0)*L_Plus(0)
  DO l=1,Nloc
    Uface=Uface+Uvol(:,:,:,l)*L_Plus(l)
  END DO ! l
END SELECT
END SUBROUTINE EvalElemFaceG


!==================================================================================================================================
!> Interpolates the element volume data stored at Gauss-Lobatto points
!==================================================================================================================================
PPURE SUBROUTINE EvalElemFaceGL(&
#ifdef WITHnVar
    TP_nVar,&
#endif
    Nloc,Uvol,Uface,locSide)
! MODULES
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVar
INTEGER,INTENT(IN)              :: TP_nVar
#endif
INTEGER,INTENT(IN)              :: Nloc
INTEGER,INTENT(IN)              :: locSide
REAL,INTENT(IN)                 :: Uvol( TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc))
REAL,INTENT(OUT)                :: Uface(TP_nVar,0:Nloc,0:ZDIM(Nloc))
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
!==================================================================================================================================
SELECT CASE(locSide)
CASE(XI_MINUS)
  Uface=Uvol(:,0,:,:)
CASE(ETA_MINUS)
  Uface=Uvol(:,:,0,:)
CASE(ZETA_MINUS)
  Uface=Uvol(:,:,:,0)
CASE(XI_PLUS)
  Uface=Uvol(:,Nloc,:,:)
CASE(ETA_PLUS)
  Uface=Uvol(:,:,Nloc,:)
CASE(ZETA_PLUS)
  Uface=Uvol(:,:,:,Nloc)
END SELECT
END SUBROUTINE EvalElemFaceGL
