!=================================================================================================================================
! Copyright (c) 2010-2016  Prof. Claus-Dieter Munz 
! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/
!
! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License 
! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
!
! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.
!=================================================================================================================================
#if PARABOLIC
#include "flexi.h"
#include "eos.h"

!==================================================================================================================================
!> \brief Computes the volume integral of the BR1 or BR2 scheme in the non conservative way for all directions in strong form.
!>
!> Requires lifting in strong form
!> In the non conservative form of the volume integral in BR1/2 we first differentiate the flux (which is the solution in BR1) and
!> then apply the metric terms. This is the fastest implementation of the volume integral and only available in strong form.
!==================================================================================================================================
PPURE SUBROUTINE Lifting_VolInt_Nonconservative(UPrim,gradUx,gradUy,gradUz)
! MODULES
USE MOD_PreProc
USE MOD_DG_Vars      ,ONLY: D_T
USE MOD_Mesh_Vars    ,ONLY: Metrics_fTilde,Metrics_gTilde
#if (PP_dim==3)
USE MOD_Mesh_Vars    ,ONLY: Metrics_hTilde
#endif
USE MOD_Mesh_Vars    ,ONLY: nElems
!#if FV_ENABLED
!USE MOD_FV_Vars      ,ONLY: FV_Elems
!USE MOD_FV_Vars      ,ONLY: FV_Metrics_fTilde_sJ,FV_Metrics_gTilde_sJ
!USE MOD_FV_Vars      ,ONLY: gradUxi_central, gradUeta_central
!#if (PP_dim==3)
!USE MOD_FV_Vars      ,ONLY: FV_Metrics_hTilde_sJ
!USE MOD_FV_Vars      ,ONLY: gradUzeta_central
!#endif
!#endif
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
REAL,INTENT(IN)                              :: UPrim( PP_nVarPrim   ,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< solution
REAL,INTENT(OUT)                             :: gradUx(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< gradients in x-direction
REAL,INTENT(OUT)                             :: gradUy(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< gradients in y-direction
REAL,INTENT(OUT)                             :: gradUz(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< gradients in z-direction
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
REAL,DIMENSION(PP_nVarLifting) :: gradUxi,gradUeta
#if (PP_dim==3)
REAL,DIMENSION(PP_nVarLifting) :: gradUzeta
#endif
INTEGER                        :: iElem,i,j,k,l
!==================================================================================================================================
! volume integral
DO iElem=1,nElems
!#if FV_ENABLED
!  IF (FV_Elems(iElem).EQ.0) THEN ! DG element
!#endif
    DO k=0,PP_NZ; DO j=0,PP_N; DO i=0,PP_N
      gradUxi     = D_T(0,i)*UPrim(PRIM_LIFT,0,j,k,iElem)
      gradUeta    = D_T(0,j)*UPrim(PRIM_LIFT,i,0,k,iElem)
#if (PP_dim==3)
      gradUzeta   = D_T(0,k)*UPrim(PRIM_LIFT,i,j,0,iElem)
#endif
      DO l=1,PP_N
        gradUxi   = gradUxi   + D_T(l,i)*UPrim(PRIM_LIFT,l,j,k,iElem)
        gradUeta  = gradUeta  + D_T(l,j)*UPrim(PRIM_LIFT,i,l,k,iElem)
#if (PP_dim==3)
        gradUzeta = gradUzeta + D_T(l,k)*UPrim(PRIM_LIFT,i,j,l,iElem)
#endif
      END DO
#if (PP_dim==3)
    gradUx(:,i,j,k,iElem) = Metrics_fTilde(1,i,j,k,iElem,0)*gradUxi   &
                          + Metrics_gTilde(1,i,j,k,iElem,0)*gradUeta  &
                          + Metrics_hTilde(1,i,j,k,iElem,0)*gradUzeta
    gradUy(:,i,j,k,iElem) = Metrics_fTilde(2,i,j,k,iElem,0)*gradUxi   &
                          + Metrics_gTilde(2,i,j,k,iElem,0)*gradUeta  &
                          + Metrics_hTilde(2,i,j,k,iElem,0)*gradUzeta
    gradUz(:,i,j,k,iElem) = Metrics_fTilde(3,i,j,k,iElem,0)*gradUxi   &
                          + Metrics_gTilde(3,i,j,k,iElem,0)*gradUeta  &
                          + Metrics_hTilde(3,i,j,k,iElem,0)*gradUzeta
#else
    gradUx(:,i,j,k,iElem) = Metrics_fTilde(1,i,j,k,iElem,0)*gradUxi   &
                          + Metrics_gTilde(1,i,j,k,iElem,0)*gradUeta
    gradUy(:,i,j,k,iElem) = Metrics_fTilde(2,i,j,k,iElem,0)*gradUxi   &
                          + Metrics_gTilde(2,i,j,k,iElem,0)*gradUeta
#endif /*PP_dim==3*/
   END DO; END DO; END DO ! i,j,k
!#if FV_ENABLED
!  ELSE
!    DO k=0,PP_NZ; DO j=0,PP_N; DO i=0,PP_N
!#if (PP_dim==3)
!      gradUx(:,i,j,k,iElem) = FV_Metrics_fTilde_sJ(1,i,j,k,iElem)*gradUxi_central  (:,i,j,k,iElem) &
!                            + FV_Metrics_gTilde_sJ(1,i,j,k,iElem)*gradUeta_central (:,i,j,k,iElem) &
!                            + FV_Metrics_hTilde_sJ(1,i,j,k,iElem)*gradUzeta_central(:,i,j,k,iElem)
!      gradUy(:,i,j,k,iElem) = FV_Metrics_fTilde_sJ(2,i,j,k,iElem)*gradUxi_central  (:,i,j,k,iElem) &
!                            + FV_Metrics_gTilde_sJ(2,i,j,k,iElem)*gradUeta_central (:,i,j,k,iElem) &
!                            + FV_Metrics_hTilde_sJ(2,i,j,k,iElem)*gradUzeta_central(:,i,j,k,iElem)
!      gradUz(:,i,j,k,iElem) = FV_Metrics_fTilde_sJ(3,i,j,k,iElem)*gradUxi_central  (:,i,j,k,iElem) &
!                            + FV_Metrics_gTilde_sJ(3,i,j,k,iElem)*gradUeta_central (:,i,j,k,iElem) &
!                            + FV_Metrics_hTilde_sJ(3,i,j,k,iElem)*gradUzeta_central(:,i,j,k,iElem)
!#else
!      gradUx(:,i,j,k,iElem) = FV_Metrics_fTilde_sJ(1,i,j,k,iElem)*gradUxi_central  (:,i,j,k,iElem) &
!                            + FV_Metrics_gTilde_sJ(1,i,j,k,iElem)*gradUeta_central (:,i,j,k,iElem)
!      gradUy(:,i,j,k,iElem) = FV_Metrics_fTilde_sJ(2,i,j,k,iElem)*gradUxi_central  (:,i,j,k,iElem) &
!                            + FV_Metrics_gTilde_sJ(2,i,j,k,iElem)*gradUeta_central (:,i,j,k,iElem)
!#endif
!   END DO; END DO; END DO! i,j,k=0,PP_N
!  END IF
!#endif /*FV_ENABLED*/
END DO ! iElem=1,nElems

END SUBROUTINE Lifting_VolInt_Nonconservative

!==================================================================================================================================
!> \brief Computes the volume integral of the BR1 scheme in the conservative way for one direction at a time (x,y,z) in weak or
!> strong form (BR1) or only in strong form (BR2)
!>
!> In the conservative form of the volume integral in BR1 we calculate the transformed solution using the Lifting_Metrics routine
!> and then integrate over the derivative of this transformed solution. A weak or strong form volume integral can be performed.
!> - Weak form: We integrate over the transformed flux times the derivative of the trial functions, which is implemented
!>   using the D_hat_T matrix. This is the transpose of the D_hat matrix which is defined as
!>   \f$ \hat{D}_{ij}=-\frac{\omega_i}{\omega_j} D_{ij} \f$ where \f$ D_{ij} \f$ is the standard polynomial derivative matrix.
!> - Strong form: We integrate over the derivative of the transformed flux times the trial function. The derivative of the
!>   flux is calculated using the transpose of the polynomial derivative matrix D_T.
!>
!> For the implementation this means we only have to decide between using the D_hat_T or D_T matrix in the volume integral at the
!> the beginning of the routine to choose between weak or strong form.
!==================================================================================================================================
SUBROUTINE Lifting_VolInt_Conservative(dir,UPrim,gradU)
! MODULES
USE MOD_PreProc
USE MOD_Lifting_Vars       ,ONLY: doWeakLifting
USE MOD_DG_Vars            ,ONLY: D_hat_T,D_T
USE MOD_Mesh_Vars          ,ONLY: Metrics_fTilde,Metrics_gTilde,Metrics_hTilde
USE MOD_Mesh_Vars          ,ONLY: nElems
!#if FV_ENABLED
!USE MOD_FV_Vars            ,ONLY: FV_Elems
!USE MOD_FV_Vars            ,ONLY: FV_Metrics_fTilde_sJ,FV_Metrics_gTilde_sJ
!USE MOD_FV_Vars            ,ONLY: gradUxi_central, gradUeta_central
!#if (PP_dim==3)
!USE MOD_FV_Vars            ,ONLY: FV_Metrics_hTilde_sJ
!USE MOD_FV_Vars            ,ONLY: gradUzeta_central
!#endif
!#endif
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
INTEGER,INTENT(IN)            :: dir       !< direction (x,y,z)
REAL,INTENT(IN)               :: UPrim(PP_nVarPrim   ,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< solution
REAL,INTENT(OUT)              :: gradU(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< solution gradient in direction dir
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
REAL                                                 :: DMat(0:PP_N,0:PP_N)
REAL,DIMENSION(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ) :: UE_f,UE_g,UE_h ! transformed gradient flux (i.e. transformed solution)
INTEGER                                              :: iElem,i,j,k,l
!==================================================================================================================================
IF(doWeakLifting)THEN
  DMat=D_hat_T
ELSE
  DMat=D_T
END IF

! volume integral
DO iElem=1,nElems
!#if FV_ENABLED
!  IF (FV_Elems(iElem).EQ.0) THEN ! DG element
!#endif
  CALL Lifting_Metrics(dir,UPrim(:,:,:,:,iElem),&
                       Metrics_fTilde(:,:,:,:,iElem,0),&
                       Metrics_gTilde(:,:,:,:,iElem,0),&
                       Metrics_hTilde(:,:,:,:,iElem,0),&
                       UE_f,UE_g,UE_h)

  DO k=0,PP_NZ; DO j=0,PP_N; DO i=0,PP_N
    gradU(:,i,j,k,iElem)   =                      DMat(0,i)*UE_f(:,0,j,k)+&
#if (PP_dim==3)
                                                  DMat(0,k)*UE_h(:,i,j,0)+&
#endif
                                                  DMat(0,j)*UE_g(:,i,0,k)
    DO l=1,PP_N
      gradU(:,i,j,k,iElem) = gradU(:,i,j,k,iElem)+DMat(l,i)*UE_f(:,l,j,k)+&
#if (PP_dim==3)
                                                  DMat(l,k)*UE_h(:,i,j,l)+&
#endif
                                                  DMat(l,j)*UE_g(:,i,l,k)
    END DO ! l
  END DO; END DO; END DO ! i,j,k
!#if FV_ENABLED
!  ELSE
!    DO k=0,PP_NZ; DO j=0,PP_N; DO i=0,PP_N
!      gradU(:,i,j,k,iElem) = FV_Metrics_fTilde_sJ(dir,i,j,k,iElem)*gradUxi_central  (:,i,j,k,iElem) &
!#if (PP_dim==3)
!                           + FV_Metrics_hTilde_sJ(dir,i,j,k,iElem)*gradUzeta_central(:,i,j,k,iElem) &
!#endif
!                           + FV_Metrics_gTilde_sJ(dir,i,j,k,iElem)*gradUeta_central (:,i,j,k,iElem)
!    END DO; END DO; END DO! i,j,k=0,PP_N
!  END IF
!#endif /*FV_ENABLED*/

END DO ! iElem=1,nElems
END SUBROUTINE Lifting_VolInt_Conservative

!==================================================================================================================================
!> \brief Computes the volume integral of the BR1 or BR2 scheme in the non conservative way for all directions in strong form.
!>
!> Requires lifting in strong form
!> In the non conservative form of the volume integral in BR1/2 we first differentiate the flux (which is the solution in BR1) and
!> then apply the metric terms. This is the fastest implementation of the volume integral and only available in strong form.
!==================================================================================================================================
PPURE SUBROUTINE Lifting_VolInt_Nonconservative_GPU(d_UPrim,d_gradUx,d_gradUy,d_gradUz)
! MODULES
USE MOD_PreProc
USE MOD_DG_Vars      ,ONLY: d_D_T,nDOFElem
USE MOD_Mesh_Vars    ,ONLY: d_Metrics_fTilde,d_Metrics_gTilde
#if (PP_dim==3)
USE MOD_Mesh_Vars    ,ONLY: d_Metrics_hTilde
#endif
USE MOD_Mesh_Vars    ,ONLY: nElems
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
REAL,DEVICE,INTENT(IN)                     :: d_UPrim( PP_nVarPrim   ,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< solution
REAL,DEVICE,INTENT(OUT)                    :: d_gradUx(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< gradients in x-direction
REAL,DEVICE,INTENT(OUT)                    :: d_gradUy(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< gradients in y-direction
REAL,DEVICE,INTENT(OUT)                    :: d_gradUz(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< gradients in z-direction
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER           :: nDOF
INTEGER,PARAMETER :: nThreads=256
!==================================================================================================================================
! volume integral
nDOF = nDOFElem*nElems
CALL Lifting_VolInt_Nonconservative_GPU_Kernel<<<nDOF/nThreads+1,nThreads>>>(PP_N,nElems,d_UPrim &
                                                                            ,d_gradUx,d_gradUy,d_gradUz&
                                                                            ,d_Metrics_fTilde(:,:,:,:,:,0) &
                                                                            ,d_Metrics_gTilde(:,:,:,:,:,0) &
                                                                            ,d_Metrics_hTilde(:,:,:,:,:,0) &
                                                                            ,d_D_T &
                                                                            )

END SUBROUTINE Lifting_VolInt_Nonconservative_GPU

!==================================================================================================================================
!> \brief Computes the volume integral of the BR1 or BR2 scheme in the non conservative way for all directions in strong form.
!>
!> Requires lifting in strong form
!> In the non conservative form of the volume integral in BR1/2 we first differentiate the flux (which is the solution in BR1) and
!> then apply the metric terms. This is the fastest implementation of the volume integral and only available in strong form.
!==================================================================================================================================
PPURE ATTRIBUTES(GLOBAL) SUBROUTINE Lifting_VolInt_Nonconservative_GPU_Kernel(Nloc,nElems,UPrim,gradUx,gradUy,gradUz,Mf,Mg,Mh,D_T)
! MODULES
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
INTEGER,VALUE,INTENT(IN)   :: Nloc   !< Polynomial degree of arrays
INTEGER,VALUE,INTENT(IN)   :: nElems !< Number of elements in arrays
REAL,DEVICE,INTENT(IN)     :: UPrim( PP_nVarPrim   ,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)   !< solution
REAL,DEVICE,INTENT(OUT)    :: gradUx(PP_nVarLifting,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)   !< gradients in x-direction
REAL,DEVICE,INTENT(OUT)    :: gradUy(PP_nVarLifting,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)   !< gradients in y-direction
REAL,DEVICE,INTENT(OUT)    :: gradUz(PP_nVarLifting,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems)   !< gradients in z-direction
REAL,DEVICE,INTENT(IN)     :: Mf(                 3,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< metrics in x-direction
REAL,DEVICE,INTENT(IN)     :: Mg(                 3,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< metrics in y-direction
REAL,DEVICE,INTENT(IN)     :: Mh(                 3,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< metrics in z-direction
REAL,DEVICE,INTENT(IN)     :: D_T(0:Nloc,0:Nloc) !< Derivative matrix
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
REAL,DIMENSION(PP_nVarLifting) :: gradUxi,gradUeta
#if (PP_dim==3)
REAL,DIMENSION(PP_nVarLifting) :: gradUzeta
#endif
INTEGER                        :: threadID,ElemID,i,j,k,l,rest
!==================================================================================================================================
! Get thread indices
threadID = (blockidx%x-1) * blockdim%x + threadidx%x
! Get ElemID of current thread
ElemID   =        (threadID-1)/(Nloc+1)**3+1 ! Elems are 1-indexed
rest     = threadID-(ElemID-1)*(Nloc+1)**3
! Get ijk indices of current thread
k        = (rest-1)/(Nloc+1)**2
rest     =  rest- k*(Nloc+1)**2
j        = (rest-1)/(Nloc+1)!**1
rest     =  rest- j*(Nloc+1)!**1
i        = (rest-1)!/(Nloc+1)**0

IF (ElemID.LE.nElems) THEN
  ! Nullify
  gradUxi(  :) = 0.
  gradUeta( :) = 0.
  gradUzeta(:) = 0.
  ! volume integral
  DO l=0,Nloc
    gradUxi   = gradUxi   + D_T(l,i)*UPrim(PRIM_LIFT,l,j,k,ElemID)
    gradUeta  = gradUeta  + D_T(l,j)*UPrim(PRIM_LIFT,i,l,k,ElemID)
#if (PP_dim==3)
    gradUzeta = gradUzeta + D_T(l,k)*UPrim(PRIM_LIFT,i,j,l,ElemID)
#endif
  END DO
#if (PP_dim==3)
  gradUx(:,i,j,k,ElemID) = Mf(1,i,j,k,ElemID)*gradUxi   &
                         + Mg(1,i,j,k,ElemID)*gradUeta  &
                         + Mh(1,i,j,k,ElemID)*gradUzeta
  gradUy(:,i,j,k,ElemID) = Mf(2,i,j,k,ElemID)*gradUxi   &
                         + Mg(2,i,j,k,ElemID)*gradUeta  &
                         + Mh(2,i,j,k,ElemID)*gradUzeta
  gradUz(:,i,j,k,ElemID) = Mf(3,i,j,k,ElemID)*gradUxi   &
                         + Mg(3,i,j,k,ElemID)*gradUeta  &
                         + Mh(3,i,j,k,ElemID)*gradUzeta
#else
  gradUx(:,i,j,k,ElemID) = Mf(1,i,j,k,ElemID)*gradUxi   &
                         + Mg(1,i,j,k,ElemID)*gradUeta
  gradUy(:,i,j,k,ElemID) = Mf(2,i,j,k,ElemID)*gradUxi   &
                         + Mg(2,i,j,k,ElemID)*gradUeta
#endif /*PP_dim==3*/
END IF

END SUBROUTINE Lifting_VolInt_Nonconservative_GPU_Kernel

!==================================================================================================================================
!> \brief Computes the volume integral of the BR1 scheme in the conservative way for one direction at a time (x,y,z) in weak or
!> strong form (BR1) or only in strong form (BR2)
!>
!> In the conservative form of the volume integral in BR1 we calculate the transformed solution using the Lifting_Metrics routine
!> and then integrate over the derivative of this transformed solution. A weak or strong form volume integral can be performed.
!> - Weak form: We integrate over the transformed flux times the derivative of the trial functions, which is implemented
!>   using the D_hat_T matrix. This is the transpose of the D_hat matrix which is defined as
!>   \f$ \hat{D}_{ij}=-\frac{\omega_i}{\omega_j} D_{ij} \f$ where \f$ D_{ij} \f$ is the standard polynomial derivative matrix.
!> - Strong form: We integrate over the derivative of the transformed flux times the trial function. The derivative of the
!>   flux is calculated using the transpose of the polynomial derivative matrix D_T.
!>
!> For the implementation this means we only have to decide between using the D_hat_T or D_T matrix in the volume integral at the
!> the beginning of the routine to choose between weak or strong form.
!==================================================================================================================================
SUBROUTINE Lifting_VolInt_Conservative_GPU(dir,d_UPrim,d_gradU)
! MODULES
USE MOD_PreProc
USE MOD_DG_Vars            ,ONLY: d_D_hat_T,d_D_T,nDOFElem
USE MOD_Mesh_Vars          ,ONLY: d_Metrics_fTilde,d_Metrics_gTilde,d_Metrics_hTilde
USE MOD_Mesh_Vars          ,ONLY: nElems
USE MOD_Lifting_Vars       ,ONLY: doWeakLifting
USE MOD_Lifting_Vars       ,ONLY: d_UE_f,d_UE_g,d_UE_h,nElems_Block_volIntLift
USE MOD_ApplyDMatrixLifting,ONLY: ApplyDMatrixLifting
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
INTEGER,VALUE,INTENT(IN)     :: dir       !< direction (x,y,z)
REAL,DEVICE,INTENT(IN)       :: d_UPrim(PP_nVarPrim   ,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< solution
REAL,DEVICE,INTENT(OUT)      :: d_gradU(PP_nVarLifting,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< solution gradient in direction dir
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER            :: iElem,lastElem,nElems_myBlock
INTEGER            :: nDOF
INTEGER,PARAMETER  :: nThreads=256
REAL,DEVICE        :: d_D(0:PP_N,0:PP_N)
!==================================================================================================================================
IF (doWeakLifting) THEN
  d_D=d_D_hat_T
ELSE
  d_D=d_D_T
END IF

! volume integral
DO iElem=1,nElems,nElems_Block_volIntLift
  lastElem    = MIN(nElems,iElem+nElems_Block_volIntLift-1)
  nElems_myBlock = lastElem-iElem+1
  nDOF = nDOFElem*nElems_myBlock

  CALL Lifting_Metrics_GPU(dir,nDOFElem*nElems_myBlock, &
                                    d_UPrim(:,:,:,:,iElem:lastElem  ),&
                           d_Metrics_fTilde(:,:,:,:,iElem:lastElem,0),&
                           d_Metrics_gTilde(:,:,:,:,iElem:lastElem,0),&
                           d_Metrics_hTilde(:,:,:,:,iElem:lastElem,0),&
                           d_UE_f,d_UE_g,d_UE_h)

  CALL ApplyDMatrixLifting(nElems_myBlock &
                          ,d_gradU(:,:,:,:,iElem:lastElem) &
                          ,d_UE_f( :,:,:,:,1:nElems_myBlock) &
                          ,d_UE_g( :,:,:,:,1:nElems_myBlock) &
                          ,d_UE_h( :,:,:,:,1:nElems_myBlock) &
                          ,d_D &
                          )

END DO ! iElem=1,nElems
END SUBROUTINE Lifting_VolInt_Conservative_GPU

!==================================================================================================================================
!> \brief Compute the tranformed gradient fluxes
!>
!> Transform the gradient terms by multiplying them with the metrics terms
!> For the direction \f$ d \f$ the transformed gradient flux is \f$ \sum_{n=1}^3 Ja^d_n U \f$.
!==================================================================================================================================
SUBROUTINE Lifting_Metrics(dir,UPrim,Mf,Mg,Mh,UPrim_f,UPrim_g,UPrim_h)
! MODULES
USE MOD_DG_Vars,ONLY:nDOFElem
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
INTEGER,INTENT(IN) :: dir                                 !< direction (x,y,z)
REAL,INTENT(IN)    :: Mf(3,nDOFElem)                      !< metrics in xi
REAL,INTENT(IN)    :: Mg(3,nDOFElem)                      !< metrics in eta
REAL,INTENT(IN)    :: Mh(3,nDOFElem)                      !< metrics in zeta
REAL,INTENT(IN)    :: UPrim  (PP_nVarPrim   ,nDOFElem)    !< solution ("flux")
REAL,INTENT(OUT)   :: UPrim_f(PP_nVarLifting,nDOFElem)    !< gradient flux xi
REAL,INTENT(OUT)   :: UPrim_g(PP_nVarLifting,nDOFElem)    !< gradient flux eta
REAL,INTENT(OUT)   :: UPrim_h(PP_nVarLifting,nDOFElem)    !< gradient flux zeta
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER            :: i
!==================================================================================================================================
DO i=1,nDOFElem
  UPrim_f(:,i) = Mf(dir,i)*UPrim(PRIM_LIFT,i)
  UPrim_g(:,i) = Mg(dir,i)*UPrim(PRIM_LIFT,i)
#if (PP_dim==3)
  UPrim_h(:,i) = Mh(dir,i)*UPrim(PRIM_LIFT,i)
#endif
END DO ! i
END SUBROUTINE Lifting_Metrics

!==================================================================================================================================
!> \brief Compute the tranformed gradient fluxes
!>
!> Transform the gradient terms by multiplying them with the metrics terms
!> For the direction \f$ d \f$ the transformed gradient flux is \f$ \sum_{n=1}^3 Ja^d_n U \f$.
!==================================================================================================================================
SUBROUTINE Lifting_Metrics_GPU(dir,nDOF,d_UPrim,d_Mf,d_Mg,d_Mh,d_UPrim_f,d_UPrim_g,d_UPrim_h)
! MODULES
USE MOD_Lifting_Vars ,ONLY:d_LiftToPrim
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
INTEGER,VALUE,INTENT(IN) :: dir                             !< direction (x,y,z)
INTEGER,VALUE,INTENT(IN) :: nDOF                            !< direction (x,y,z)
REAL,DEVICE,INTENT(IN)   :: d_Mf(3,nDOF)                    !< metrics in xi
REAL,DEVICE,INTENT(IN)   :: d_Mg(3,nDOF)                    !< metrics in eta
REAL,DEVICE,INTENT(IN)   :: d_Mh(3,nDOF)                    !< metrics in zeta
REAL,DEVICE,INTENT(IN)   :: d_UPrim  (PP_nVarPrim   ,nDOF)  !< solution ("flux")
REAL,DEVICE,INTENT(OUT)  :: d_UPrim_f(PP_nVarLifting,nDOF)  !< gradient flux xi
REAL,DEVICE,INTENT(OUT)  :: d_UPrim_g(PP_nVarLifting,nDOF)  !< gradient flux eta
REAL,DEVICE,INTENT(OUT)  :: d_UPrim_h(PP_nVarLifting,nDOF)  !< gradient flux zeta
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER            :: i,iVar
!==================================================================================================================================
!$cuf kernel do <<< *, * >>>
DO i=1,nDOF
  DO iVar=1,PP_nVarLifting
    d_UPrim_f(iVar,i) = d_Mf(dir,i)*d_UPrim(d_LiftToPrim(iVar),i)
    d_UPrim_g(iVar,i) = d_Mg(dir,i)*d_UPrim(d_LiftToPrim(iVar),i)
#if (PP_dim==3)
    d_UPrim_h(iVar,i) = d_Mh(dir,i)*d_UPrim(d_LiftToPrim(iVar),i)
#endif
  END DO ! iVar
END DO ! i
END SUBROUTINE Lifting_Metrics_GPU

#endif /*PARABOLIC*/
