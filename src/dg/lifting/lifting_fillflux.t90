!=================================================================================================================================
! Copyright (c) 2010-2016  Prof. Claus-Dieter Munz
! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/
!
! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
!
! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.
!=================================================================================================================================
#if PARABOLIC
#include "flexi.h"
#include "eos.h"

!==================================================================================================================================
!> \brief Computes the BR1 or BR2 Surface Fluxes in direction "dir"
!>
!> The routine fills the flux arrays for the sides ranging from firstSideID to lastSideID using the BR1/2 approximation of surface
!> fluxes, Surfelem contribution is considered as well
!> In case one of the elements contains a FV solution, the FV integral means from the FV element have to be transformed onto the DG
!> nodes set.

!> Specific to BR1:
!> Fills the untransformed interior surface fluxes for the BR1 scheme. The numerical flux in the
!> BR1 lifting is simply taken as the arithmetic mean of the solution.
!> The physical flux will be multiplied by the surface element contribution and in a later routine by the normal vector to
!> transform into reference space,
!> see e.g. "Explicit discontinuous Galerkin methods for unsteady problems" (Hindenlang et al. 2012) for details.
!> For the strong form, in the surface integral the inner solution is substracted form the numerical flux. Since the numerical
!> flux is \f$ \frac{1}{2} (U^+ + U^-) \f$ and the inner solution is simply \f$ U^- \f$ for the master side
!> , the surface flux will become \f$ \frac{1}{2} (U^+ + U^-) - U^- = \frac{1}{2} (U^+ - U^-) \f$ for the strong form.
!>
!> The flux is filled for the master side, the contribution for the slave side (which is different because the inner solution
!> is equal to \f$ U^+ \f$) is taken into account in the SurfInt routine.
!==================================================================================================================================
PPURE SUBROUTINE Lifting_FillFlux(d_UPrimface_master,d_UPrimface_slave,d_Flux,doMPISides,streamID)
! MODULES
USE CUDAFOR
USE MOD_GPU       ,ONLY:DefaultStream
USE MOD_PreProc
USE MOD_Lifting_Vars,    ONLY: d_LiftToPrim,doWeakLifting
USE MOD_Mesh_Vars,       ONLY: d_SurfElem
USE MOD_Mesh_Vars,       ONLY: nSides
USE MOD_Mesh_Vars,       ONLY: firstInnerSide,lastInnerSide
USE MOD_Mesh_Vars,       ONLY: firstMPISide_MINE,lastMPISide_MINE
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
LOGICAL,VALUE,INTENT(IN)  :: doMPISides                                             !< = .TRUE. only MINE MPISides are filled, =.FALSE. InnerSides
REAL,DEVICE,INTENT(INOUT) :: d_UPrimface_master(PP_nVarPrim   ,0:PP_N,0:PP_NZ,nSides) !< Solution on master sides
REAL,DEVICE,INTENT(INOUT) :: d_UPrimface_slave( PP_nVarPrim   ,0:PP_N,0:PP_NZ,nSides) !< Solution on slave sides
REAL,DEVICE,INTENT(INOUT) :: d_Flux(            PP_nVarLifting,0:PP_N,0:PP_NZ,nSides) !< Untransformed lifting flux
INTEGER(KIND=CUDA_STREAM_KIND),OPTIONAL,INTENT(IN) :: streamID
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER            :: SideID,p,q,firstSideID,lastSideID,iVar
REAL               :: sig
INTEGER(KIND=CUDA_STREAM_KIND) :: mystream
!==================================================================================================================================
mystream=DefaultStream
IF (PRESENT(streamID)) mystream=streamID

! fill flux for sides ranging between firstSideID and lastSideID using Riemann solver
IF(doMPISides)THEN
  ! fill only flux for MINE MPISides
  firstSideID = firstMPISide_MINE
   lastSideID =  lastMPISide_MINE
ELSE
  ! fill only InnerSides
  firstSideID = firstInnerSide
   lastSideID = lastInnerSide
END IF

! for strong form subtract solution from the inside
sig = MERGE(1., -1., doWeakLifting)

!$cuf kernel do(3) <<< *, *, 0, mystream>>>
DO SideID=firstSideID,lastSideID
  ! BR1 uses arithmetic mean value of states for the Riemann flux
  ! Transformation with NormVec is applied in separate routine
  DO q=0,PP_NZ; DO p=0,PP_N
    DO iVar=1,PP_nVarLifting
      d_Flux(iVar,p,q,SideID) = 0.5*d_SurfElem(p,q,0,SideID)*&
                              ( sig*d_UPrimface_master(d_LiftToPrim(iVar),p,q,SideID) &
                                  + d_UPrimface_slave( d_LiftToPrim(iVar),p,q,SideID) )
    END DO
  END DO; END DO
END DO ! SideID

END SUBROUTINE Lifting_FillFlux

!==================================================================================================================================
!> \brief Computes the BR1 surface fluxes for boundary conditions, surfelem contribution is considered as well.
!>
!> Fills the Untransformed boundary surface fluxes for the BR1 scheme. The numerical flux in the
!> BR1 lifting is simply taken as the arithmetic mean of the solution.
!> This routine calls the equation system dependant routine Lifting_GetBoundaryFlux which will fill the flux depending on the
!> boundary condition that has to be applied. The Lifting_GetBoundaryFlux routine will also differentiate between weak and
!> strong form and already multiply the flux by the surface element.
!>
!> For the BR1, the multiplication by the normal vector is done in a separate routine.
!>
!> The flux is filled for the master side, the contribution for the slave side (which is different because the inner solution
!> is equal to \f$ U^+ \f$) is taken into account in the SurfInt routine.
!==================================================================================================================================
SUBROUTINE Lifting_FillFlux_BC(d_UPrim_master,d_Flux)
! MODULES
USE MOD_PreProc
USE MOD_Mesh_Vars,       ONLY: d_NormVec,d_TangVec1,d_TangVec2,d_SurfElem,nSides,nBCSides
USE MOD_Equation_Vars,   ONLY: nRefState,d_RefStatePrim
USE MOD_Lifting_Vars,    ONLY: doWeakLifting
USE MOD_GetBoundaryFlux, ONLY: Lifting_GetBoundaryFlux
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
REAL,DEVICE,INTENT(IN)    :: d_UPrim_master(PP_nVarPrim,0:PP_N,0:PP_NZ,1:nSides) !< Primitive solution from the inside
REAL,DEVICE,INTENT(OUT)   :: d_Flux(     PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides) !< gradient flux
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
!==================================================================================================================================
CALL Lifting_GetBoundaryFlux(PP_N,nBCSides &
                            ,d_Flux(:,:,:,1:nBCSides) &
                            ,d_UPrim_master(:,:,:,1:nBCSides),nRefState,d_RefStatePrim &
                            ,d_NormVec( :,:,:,:,1:nBCSides)&
                            ,d_TangVec1(:,:,:,:,1:nBCSides)&
                            ,d_TangVec2(:,:,:,:,1:nBCSides)&
                            ,d_SurfElem(  :,:,:,1:nBCSides)&
                            ,doWeakLifting)
END SUBROUTINE Lifting_FillFlux_BC

!!==================================================================================================================================
!!> \brief Computes the BR1 surface fluxes for boundary conditions, surfelem contribution is considered as well.
!!>
!!> Fills the Untransformed boundary surface fluxes for the BR1 scheme. The numerical flux in the
!!> BR1 lifting is simply taken as the arithmetic mean of the solution.
!!> This routine calls the equation system dependant routine Lifting_GetBoundaryFlux which will fill the flux depending on the
!!> boundary condition that has to be applied. The Lifting_GetBoundaryFlux routine will also differentiate between weak and
!!> strong form and already multiply the flux by the surface element.
!!>
!!> For the BR1, the multiplication by the normal vector is done in a separate routine.
!!>
!!> The flux is filled for the master side, the contribution for the slave side (which is different because the inner solution
!!> is equal to \f$ U^+ \f$) is taken into account in the SurfInt routine.
!!==================================================================================================================================
!SUBROUTINE Lifting_FillFlux_BC(t,UPrim_master,Flux,FluxX,FluxY,FluxZ)
!! MODULES
!USE MOD_PreProc
!USE MOD_Mesh_Vars,       ONLY: NormVec,TangVec1,TangVec2,Face_xGP,SurfElem,nSides,nBCSides
!USE MOD_GetBoundaryFlux, ONLY: Lifting_GetBoundaryFlux
!#if FV_ENABLED
!USE MOD_FV_Vars         ,ONLY: FV_Elems_master
!#endif
!IMPLICIT NONE
!!----------------------------------------------------------------------------------------------------------------------------------
!! INPUT/OUTPUT VARIABLES
!REAL,INTENT(IN)             :: t                                                 !< Current time
!REAL,INTENT(IN)             :: UPrim_master(PP_nVarPrim,0:PP_N,0:PP_NZ,1:nSides) !< Primitive solution from the inside
!REAL,OPTIONAL,INTENT(OUT)   :: Flux (PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides)     !< gradient flux
!REAL,OPTIONAL,INTENT(OUT)   :: FluxX(PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides)     !< gradient flux in x-dir
!REAL,OPTIONAL,INTENT(OUT)   :: FluxY(PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides)     !< gradient flux in y-dir
!REAL,OPTIONAL,INTENT(OUT)   :: FluxZ(PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides)     !< gradient flux in z-dir
!!----------------------------------------------------------------------------------------------------------------------------------
!! LOCAL VARIABLES
!INTEGER                     :: SideID,p,q
!REAL                        :: Flux_loc(PP_nVarLifting,0:PP_N,0:PP_NZ)       !< local gradient flux
!!==================================================================================================================================
!
!DO SideID=1,nBCSides
!#if FV_ENABLED
!  IF (FV_Elems_master(SideID).GT.0) CYCLE
!#endif
!  CALL Lifting_GetBoundaryFlux(SideID,t,UPrim_master(:,:,:,SideID),Flux_loc(:,:,:),&
!       NormVec(:,:,:,0,SideID),TangVec1(:,:,:,0,SideID),TangVec2(:,:,:,0,SideID),Face_xGP(:,:,:,0,SideID),SurfElem(:,:,0,SideID))
!  IF(PRESENT(Flux))THEN
!    DO q=0,PP_NZ; DO p=0,PP_N
!      Flux(:,p,q,SideID)=Flux_loc(:,p,q)
!    END DO; END DO
!  END IF
!  IF(PRESENT(FluxX).AND.PRESENT(FluxY).AND.PRESENT(FluxZ))THEN
!    DO q=0,PP_NZ; DO p=0,PP_N
!      FluxX(:,p,q,SideID)=Flux_loc(:,p,q)*NormVec(1,p,q,0,SideID)
!      FluxY(:,p,q,SideID)=Flux_loc(:,p,q)*NormVec(2,p,q,0,SideID)
!#if PP_dim == 3
!      FluxZ(:,p,q,SideID)=Flux_loc(:,p,q)*NormVec(3,p,q,0,SideID)
!#else
!      FluxZ(:,p,q,SideID)=0.
!#endif
!    END DO; END DO
!  END IF
!END DO
!
!END SUBROUTINE Lifting_FillFlux_BC

!==================================================================================================================================
!> \brief Multiplies the untransformed flux (already weighted by the surface element) by the normal vector to complete the
!>        transformation into reference space.
!>
!> The untransformed fluxes is multiplied for each gradient direction by the corresponding normal vector,
!> which is the second step of the transformation. We end up with the lifting fluxes for X/Y/Z direction.
!==================================================================================================================================
PPURE SUBROUTINE Lifting_FillFlux_NormVec(d_Flux,d_FluxX,d_FluxY,d_FluxZ,doMPISides,streamID)
! MODULES
USE CUDAFOR
USE MOD_GPU       ,ONLY:DefaultStream
USE MOD_PreProc
USE MOD_Mesh_Vars,       ONLY: d_NormVec,nSides
USE MOD_Mesh_Vars,       ONLY: firstMPISide_YOUR,lastMPISide_MINE,lastMPISide_YOUR
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
LOGICAL,VALUE,INTENT(IN) :: doMPISides                                 !< = .TRUE. MPI_YOUR
                                                                       !< =.FALSE. BC+Inner+MPI_Mine
REAL,DEVICE,INTENT(IN)    :: d_Flux( PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides) !< Untransformed Lifting boundary flux
REAL,DEVICE,INTENT(INOUT) :: d_FluxX(PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides) !< Lifting boundary flux in x direction
REAL,DEVICE,INTENT(INOUT) :: d_FluxY(PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides) !< Lifting boundary flux in y direction
REAL,DEVICE,INTENT(INOUT) :: d_FluxZ(PP_nVarLifting,0:PP_N,0:PP_NZ,1:nSides) !< Lifting boundary flux in z direction
INTEGER(KIND=CUDA_STREAM_KIND),OPTIONAL,INTENT(IN) :: streamID
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER            :: firstSideID,lastSideID,SideID,p,q
INTEGER(KIND=CUDA_STREAM_KIND) :: mystream
!==================================================================================================================================
mystream=DefaultStream
IF (PRESENT(streamID)) mystream=streamID

! fill flux for sides ranging between firstSideID and lastSideID using Riemann solver
IF(doMPISides)THEN
  ! apply normal vector to YOUR
  firstSideID = firstMPISide_YOUR
   lastSideID =  lastMPISide_YOUR
ELSE
  ! apply normal vector to all MINE fluxes
  firstSideID = 1
   lastSideID = lastMPISide_MINE
END IF

!$cuf kernel do(3) <<< *, *, 0, mystream >>>
DO SideID=firstSideID,lastSideID
  DO q=0,PP_NZ; DO p=0,PP_N
    d_FluxX(:,p,q,SideID)=d_Flux(:,p,q,SideID)*d_NormVec(1,p,q,0,SideID)
    d_FluxY(:,p,q,SideID)=d_Flux(:,p,q,SideID)*d_NormVec(2,p,q,0,SideID)
    d_FluxZ(:,p,q,SideID)=d_Flux(:,p,q,SideID)*d_NormVec(3,p,q,0,SideID)
  END DO; END DO
END DO
END SUBROUTINE Lifting_FillFlux_NormVec


#endif /*PARABOLIC*/
