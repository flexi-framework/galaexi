!=================================================================================================================================
! Copyright (c) 2010-2023  Prof. Claus-Dieter Munz
! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/
!
! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
!
! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.
!=================================================================================================================================
#include "flexi.h"

!==================================================================================================================================
!> CUDA Kernel for applying the derivative matrix linewise to the fluxes and adding to time derivative.
!==================================================================================================================================
PPURE ATTRIBUTES(GLOBAL) SUBROUTINE ApplyDMatrix_Kernel(&
#ifdef WITHnVars
        TP_nVar, &
#endif
        Nloc,nElems,d_Ut,d_f,d_g,d_h,d_D_Hat_T)
!----------------------------------------------------------------------------------------------------------------------------------
! MODULES
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVars
INTEGER,VALUE,INTENT(IN) :: TP_nVar !< number of variables
#endif
INTEGER,VALUE,INTENT(IN)  :: Nloc   !< Polynomial degree
INTEGER,VALUE,INTENT(IN)  :: nElems !< Number of elements
REAL,DEVICE,INTENT(OUT)   :: d_Ut(TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< time update
REAL,DEVICE,INTENT(IN)    :: d_f( TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< flux in x
REAL,DEVICE,INTENT(IN)    :: d_g( TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< flux in y
REAL,DEVICE,INTENT(IN)    :: d_h( TP_nVar,0:Nloc,0:Nloc,0:ZDIM(Nloc),1:nElems) !< flux in z
REAL,DEVICE,INTENT(IN)    :: d_D_Hat_T(   0:Nloc,0:Nloc)                  !< Dervative matrix
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER   :: i,j,k,l,ElemID,rest,threadID
REAL      :: d_Ut_loc(TP_nVar)
!==================================================================================================================================
! Get thread indices
threadID = (blockidx%x-1) * blockdim%x + threadidx%x
! Get ElemID of current thread
ElemID   =        (threadID-1)/(Nloc+1)**3+1 ! Elems are 1-indexed
rest     = threadID-(ElemID-1)*(Nloc+1)**3
! Get ijk indices of current thread
k        = (rest-1)/(Nloc+1)**2
rest     =  rest- k*(Nloc+1)**2
j        = (rest-1)/(Nloc+1)!**1
rest     =  rest- j*(Nloc+1)!**1
i        = (rest-1)!/(Nloc+1)**0

! Only compute if within array bounds
IF (ElemID.LE.nElems) THEN
  d_Ut_loc(:) = 0.
  DO l=0,Nloc
    ! Update the time derivative with the spatial derivatives of the transformed fluxes
    d_Ut_loc(:) = d_Ut_loc(:) + d_D_Hat_T(l,i)*d_f(:,l,j,k,ElemID) &
#if PP_dim==3
                              + d_D_Hat_T(l,k)*d_h(:,i,j,l,ElemID) &
#endif
                              + d_D_Hat_T(l,j)*d_g(:,i,l,k,ElemID)
  END DO ! l
  ! Write temporary array to global array
  d_Ut(:,i,j,k,ElemID) = d_Ut_loc(:)
END IF
END SUBROUTINE ApplyDMatrix_Kernel

!==================================================================================================================================
!> Applying the derivative matrix linewise to the fluxes by calling the CUDA Kernel.
!==================================================================================================================================
PPURE SUBROUTINE ApplyDMatrix_CUDA(&
#ifdef WITHnVars
        TP_nVar, &
#endif
        nElems,d_Ut,d_f,d_g,d_h,d_D_Hat_T,streamID)
!----------------------------------------------------------------------------------------------------------------------------------
! MODULES
USE CUDAFOR
USE MOD_PreProc
USE MOD_GPU,ONLY: DefaultStream
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVars
INTEGER,VALUE,INTENT(IN)  :: TP_nVar  !< number of variables
#endif
INTEGER,VALUE,INTENT(IN)  :: nElems   !< Number of elements
REAL,DEVICE,INTENT(OUT)   :: d_Ut(TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< time update
REAL,DEVICE,INTENT(IN)    :: d_f( TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< flux in x
REAL,DEVICE,INTENT(IN)    :: d_g( TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< flux in y
REAL,DEVICE,INTENT(IN)    :: d_h( TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< flux in z
REAL,DEVICE,INTENT(IN)    :: d_D_Hat_T(   0:PP_N,0:PP_N)                  !< Dervative matrix
INTEGER(KIND=CUDA_STREAM_KIND),OPTIONAL,INTENT(IN) :: streamID
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER            :: nDOF
INTEGER,PARAMETER  :: nThreads=256
INTEGER(KIND=CUDA_STREAM_KIND) :: mystream
!==================================================================================================================================
mystream=DefaultStream
IF (PRESENT(streamID)) mystream=streamID

nDOF = (PP_N+1)*(PP_N+1)*(PP_NZ+1)*nElems
CALL ApplyDMatrix_Kernel<<<nDOF/nThreads+1,nThreads,0,mystream>>>(&
#ifdef WITHnVars
                  TP_nVar,&
#endif
                  PP_N,nElems,d_Ut,d_f,d_g,d_h,d_D_Hat_T)
END SUBROUTINE ApplyDMatrix_CUDA

!==================================================================================================================================
!> Applying the derivative matrix linewise to the fluxes and adding to time derivative.
!==================================================================================================================================
PPURE SUBROUTINE ApplyDMatrix(&
#ifdef WITHnVars
        TP_nVar, &
#endif
        nElems,Ut,f,g,h,D_Hat_T)
!----------------------------------------------------------------------------------------------------------------------------------
! MODULES
USE MOD_PreProc
IMPLICIT NONE
!----------------------------------------------------------------------------------------------------------------------------------
! INPUT/OUTPUT VARIABLES
#ifdef WITHnVars
INTEGER,INTENT(IN) :: TP_nVar  !< number of variables
#endif
INTEGER,INTENT(IN) :: nElems   !< Number of elements
REAL,INTENT(OUT)   :: Ut(TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< time update
REAL,INTENT(IN)    :: f( TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< flux in x
REAL,INTENT(IN)    :: g( TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< flux in y
REAL,INTENT(IN)    :: h( TP_nVar,0:PP_N,0:PP_N,0:PP_NZ,1:nElems) !< flux in z
REAL,INTENT(IN)    :: D_Hat_T(   0:PP_N,0:PP_N)                  !< Dervative matrix
!----------------------------------------------------------------------------------------------------------------------------------
! LOCAL VARIABLES
INTEGER   :: i,j,k,l,iElem
!==================================================================================================================================
DO iElem=1,nElems
  DO k=0,PP_NZ; DO j=0,PP_N; DO i=0,PP_N
    ! Update the time derivative with the spatial derivatives of the transformed fluxes
    Ut(:,i,j,k,iElem) =                       D_Hat_T(0,i)*f(:,0,j,k,iElem) &
#if PP_dim==3
                                            + D_Hat_T(0,k)*h(:,i,j,0,iElem) &
#endif
                                            + D_Hat_T(0,j)*g(:,i,0,k,iElem)
    DO l=1,PP_N
      Ut(:,i,j,k,iElem) = Ut(:,i,j,k,iElem) + D_Hat_T(l,i)*f(:,l,j,k,iElem) &
#if PP_dim==3
                                            + D_Hat_T(l,k)*h(:,i,j,l,iElem) &
#endif
                                            + D_Hat_T(l,j)*g(:,i,l,k,iElem)
    END DO ! l
  END DO;END DO;END DO ! i,j,k
END DO ! iElem
END SUBROUTINE ApplyDMatrix
