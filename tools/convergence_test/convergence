#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import sys
import math
import shutil
import tempfile
import time
import argparse
import csv

from modify_prm import modify_prm, read_prm
from analyze_functions import get_last_L2_error, get_last_Linf_error
from execute_flexi import execute_flexi
from table_output import print_header, print_values

def copy2temporary(tmp_dir, f) :
    name = os.path.join(tmp_dir, os.path.basename(f))
    shutil.copy(f, name)
    return name

parser = argparse.ArgumentParser(description='Tool to calculate the convergence rate')
parser.add_argument('--Nmax'        , type=int, default=10, help='maximal polynomial degree N')
parser.add_argument('-p','--procs'  , type=int, default=1 , help='number of processors used to run Flexi')
parser.add_argument('-g','--gnuplot', action='store_true' , help='generate gnuplot pics (needs python-gnuplot package)')
parser.add_argument('--printprmfile', action='store_true' , help='output parameter file at the beginning')
parser.add_argument('flexi'                               , help='path to flexi executable')
parser.add_argument('prm'                                 , help='path to parameter file')

args = parser.parse_args()

if not os.path.exists(args.prm) :
    print("parameter-file {:s} not found".format(args.prm))
    sys.exit(1)

# copy flexi executable and parameter file to a temporary directory
tmp_dir    = tempfile.mkdtemp()
args.flexi = copy2temporary(tmp_dir, args.flexi)
args.prm   = copy2temporary(tmp_dir, args.prm)

#print parameter file
if args.printprmfile :
    for line in open(args.prm, 'r').readlines() :
        print(line)

# get ProjectName
projectname = read_prm(args.prm,'ProjectName')

# get MeshFile
meshfile    = read_prm(args.prm,'MeshFile')
args.mesh   = copy2temporary(tmp_dir, meshfile)

# open file to print order of convergence
convfile  = open(projectname+'_pconvfile.csv','w')
csvwriter = csv.writer(convfile, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)

x_array  = []
L2_array = []
i        = 0
# loop over polynomial degrees
for N in range(1,args.Nmax+1) :
    i = i + 1

    # modify polynomial degree
    modify_prm(args.prm, {'N' : N})

    # save last L2, Linf error for EOC computation
    if i > 1 :
        last_L2   = L2
        last_Linf = Linf

    # execute flexi and get L2, L_inf error
    start_time = time.time()
    # try :
    L2, Linf = execute_flexi(args.flexi, args.prm, projectname, \
                [get_last_L2_error, get_last_Linf_error], mpi_procs = args.procs)
    # except :
    #     shutil.rmtree(tmp_dir)
    #     print('Execution failed for PP_N={}'.format(i))
    #     exit(1)
    end_time = time.time()

    if i == 1:
        # output header of output-table
        print_header([' N '] + len(L2)*['L2 err   EOC     '] + len(Linf)*['Linf err  EOC    '])

        L2Err   = []
        L2EOC   = []
        LInfErr = []
        LInfEOC = []
        for j in range(len(L2)) :
            L2Err.append(  ' L2 Err V'  +str(j+1))
            L2EOC.append(  ' L2 EOC V'  +str(j+1))
        for j in range(len(Linf)) :
            LInfErr.append(' Linf Err V'+str(j+1))
            LInfEOC.append(' Linf EOC V'+str(j+1))
        csvwriter.writerow([' N '] + L2Err + LInfErr + L2EOC + LInfEOC)

        # print initial values
        print_values([N]+L2+Linf, ["%3d"] + (len(L2)+len(Linf)) * ["%8.2e         "])
        csvwriter.writerow([N]+L2+Linf)
    else :
        # print L2, Linf errors and EOC
        convL2   = [None]*len(L2)
        convLinf = [None]*len(Linf)
        vals     = [N]
        for j in range(len(L2)) :
            convL2[j] = math.log(  last_L2[j]   /   L2[j]) / math.log(float(N+1)/float(last_N+1))
            vals.append(L2[j])
            vals.append(convL2[j])
        for j in range(len(Linf)) :
            convLinf[j] = math.log(last_Linf[j] / Linf[j]) / math.log(float(N+1)/float(last_N+1))
            vals.append(Linf[j])
            vals.append(convLinf[j])
        print_values(vals, ["%3d"] + (len(L2)+len(Linf)) * ["%8.2e","%8.4f"])
        csvwriter.writerow([N]+L2+Linf)

    x_array.append(i)
    L2_array.append(L2[1]) # x- Momentum

    #print end_time - start_time
    sys.stdout.flush()
    last_N = N

convfile.closed

if args.gnuplot :
    # Try to import gnuplot for line plot output. If not on the system, set a flag to supress this output
    # You will need the python-gnuplot package for this
    try:
        import Gnuplot
        args.gnuplot = False
        # create filename for Gnuplot
        filename = projectname+"_convtest_N.pdf"
        shutil.copy(args.prm,filename)
        g = Gnuplot.Gnuplot()
        g.title('ConvTest X-Momentum')
        g.xlabel('Polynomial Degree')
        g.ylabel('L2 Error')
        g('set logscale xy')
        g('set terminal pdf')
        g('set output "'+filename+'"')
        gnuplot_data = Gnuplot.Data(x_array,L2_array,with_="line")
        g('exact(x)=(1./x)**x')
        g.plot(gnuplot_data,'exact(x)')
    except ImportError:
        print("No 'python-gnuplot' package found!")

shutil.rmtree(tmp_dir)
