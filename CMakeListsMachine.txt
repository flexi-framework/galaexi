# =========================================================================
# Detect machine environments
# =========================================================================
CMAKE_HOST_SYSTEM_INFORMATION(RESULT CMAKE_FQDN_HOST QUERY FQDN)
MARK_AS_ADVANCED(FORCE CMAKE_FQDN_HOST)
MARK_AS_ADVANCED(FORCE CMAKE_HOSTNAME)
SITE_NAME(CMAKE_HOSTNAME)

# =========================================================================
# CMake generator settings
# =========================================================================
SET(USED_CMAKE_GENERATOR "${CMAKE_GENERATOR}" CACHE STRING "Expose CMAKE_GENERATOR (cannot be changed here)" FORCE)
IF("${CMAKE_GENERATOR}" MATCHES "Ninja")
  # CMake introduced the CMAKE_COLOR_DIAGNOSTICS flag with 3.24.0, https://gitlab.kitware.com/cmake/cmake/-/merge_requests/6990
  IF(NOT(${CMAKE_VERSION} VERSION_LESS "3.24.0"))
    SET(CMAKE_COLOR_DIAGNOSTICS ON CACHE INTERNAL "Flag if CMake should attempt to color output")
  ELSE()
    SET(NINJA_COLOR_DIAGNOSTICS "-fdiagnostics-color=always" CACHE INTERNAL "Flag if Ninja should attempt to color output")
  ENDIF()
ENDIF()
MESSAGE(STATUS "Generating for [${CMAKE_GENERATOR}] build system")

# =========================================================================
# Some clusters requires setting the compilers by hand and invoking
# ENABLE_LANGUAGE afterwards, which is required for
# CMAKE_Fortran_COMPILER_ID that is used below
# > This block must be called before ENABLE_LANGUAGE
# =========================================================================
# HLRS HAWK/HAWK-AI
IF (CMAKE_FQDN_HOST MATCHES "hawk.*\.hww\.hlrs\.de$")
  SET(CMAKE_C_COMPILER       nvc)
  SET(CMAKE_CXX_COMPILER     nvc++)
  SET(CMAKE_Fortran_COMPILER nvfortran)
# SuperMUC
# ELSEIF(CMAKE_FQDN_HOST MATCHES "sng\.lrz\.de$"
# LUMI
ELSEIF(CMAKE_FQDN_HOST MATCHES "\.can$")
  SET(CMAKE_C_COMPILER       cc)
  SET(CMAKE_CXX_COMPILER     CC)
  SET(CMAKE_Fortran_COMPILER ftn)
# IAG Prandtl
ELSEIF(CMAKE_FQDN_HOST MATCHES "^(prandtl|grafik.*)\.iag\.uni\-stuttgart\.de")
  SET(CMAKE_C_COMPILER       gcc)
  SET(CMAKE_CXX_COMPILER     c++)
  SET(CMAKE_Fortran_COMPILER gfortran)
# JUWELS/JURECA
ELSEIF ("${CMAKE_FQDN_HOST}" MATCHES "j(r|w)(login.*|c.*)")
  SET(CMAKE_C_COMPILER       nvc)
  SET(CMAKE_CXX_COMPILER     nvc++)
  SET(CMAKE_Fortran_COMPILER nvfortran)
ENDIF()

# =========================================================================
# Score-P instrumentation infrastructure
# > This option must be called before ENABLE_LANGUAGE, thus is only available
# > through -DMACHINE_USE_SCOREP=ON
# =========================================================================
IF (MACHINE_USE_SCOREP)
  FIND_PROGRAM(SCOREP_C_COMPILER scorep-${CMAKE_C_COMPILER})
  MARK_AS_ADVANCED(FORCE SCOREP_C_COMPILER )
  IF (SCOREP_C_COMPILER MATCHES "NOTFOUND")
    MESSAGE (FATAL_ERROR "Score-P not available in PATH. Did you load the module?")
  ENDIF()

  # Set default build type to profile
  IF (NOT CMAKE_BUILD_TYPE)
    SET (CMAKE_BUILD_TYPE Profile CACHE STRING "Choose the type of build, options are: Debug Release Profile Sanitize." FORCE)
  ENDIF (NOT CMAKE_BUILD_TYPE)
  IF (CMAKE_BUILD_TYPE MATCHES "Release")
    MESSAGE (WARNING "Score-P requires debug compile flags which are not available with BUILD_TYPE='Release'")
  ENDIF()

  SET(CMAKE_C_COMPILER       "scorep-${CMAKE_C_COMPILER}")
  SET(CMAKE_CXX_COMPILER     "scorep-${CMAKE_CXX_COMPILER}")
  SET(CMAKE_Fortran_COMPILER "scorep-${CMAKE_Fortran_COMPILER}")
ENDIF()

# =========================================================================
# After settings specific compilers, enable named languages for cmake
# =========================================================================
ENABLE_LANGUAGE(Fortran C CXX)
INCLUDE(GNUInstallDirs)
MARK_AS_ADVANCED(FORCE C_PATH CXX_PATH Fortran_PATH)

# =========================================================================
# Set machine-specific definitions and settings
# =========================================================================
# HLRS HAWK
IF (CMAKE_FQDN_HOST MATCHES "hawk-login.*\.hww\.hlrs\.de$")
  MESSAGE(STATUS "Compiling on Hawk")
  ADD_DEFINITIONS(-DLUSTRE)

# HLRS HAWK AI
ELSEIF (CMAKE_FQDN_HOST MATCHES "hawk-ai.*\.hww\.hlrs\.de$")
  MESSAGE(STATUS "Compiling on Hawk-AI")
  ADD_DEFINITIONS(-DLUSTRE)

# SuperMUC
ELSEIF (CMAKE_FQDN_HOST MATCHES "sng\.lrz\.de$")
  MESSAGE(STATUS "Compiling on SuperMUC")
  # Overwrite compiler target architecture
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang")
    SET(FLEXI_INSTRUCTION "-march=skylake-avx512 -mtune=skylake-avx512")
  ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
    SET(FLEXI_INSTRUCTION "-xSKYLAKE-AVX512")
    # Explicitely enable usage of AVX512 registers
    SET (CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -qopt-zmm-usage=high")
  ENDIF()
  # Set LUSTRE definition to account for filesystem and MPI implementation
  ADD_DEFINITIONS(-DLUSTRE)

# LUMI
ELSEIF(CMAKE_FQDN_HOST MATCHES "\.can$")
  MESSAGE(STATUS "Compiling on LUMI")
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
    SET(FLEXI_INSTRUCTION "-march=znver3 -mtune=znver3")
  ELSE()
    MESSAGE(FATAL_ERROR "LUMI currently only supported using the GNU Compiler Collection (GCC). Please load/swap the following modules: LUMI PrgEnv-gnu cray-hdf5-parallel")
  ENDIF()

# IAG Prandtl
ELSEIF(CMAKE_FQDN_HOST MATCHES "^(prandtl|grafik.*)\.iag\.uni\-stuttgart\.de")
  MESSAGE(STATUS "Compiling on ${CMAKE_HOSTNAME}")
  SET(FLEXI_INSTRUCTION "-march=native -mtune=native")
  # Set LUSTRE definition to account for filesystem
  ADD_DEFINITIONS(-DLUSTRE)

# JUWELS/JURECA
ELSEIF ("${CMAKE_FQDN_HOST}" MATCHES "j(r|w)(login.*|c.*)")
  MESSAGE(STATUS "Compiling on JSC [${CMAKE_HOSTNAME}]")
  # Set compiler target architecture
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang" OR CMAKE_Fortran_COMPILER_ID MATCHES "Cray")
    SET(FLEXI_INSTRUCTION "-march=native -mtune=native")
  ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
    SET(FLEXI_INSTRUCTION "-xHost")
  ENDIF()

ELSE()
  MESSAGE(STATUS "Compiling on a generic machine [${CMAKE_HOSTNAME}]")
  # Set compiler target architecture
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU" OR CMAKE_Fortran_COMPILER_ID MATCHES "Flang" OR CMAKE_Fortran_COMPILER_ID MATCHES "Cray")
    SET(FLEXI_INSTRUCTION "-march=native -mtune=native")
  ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
    SET(FLEXI_INSTRUCTION "-xHost")
  ENDIF()
ENDIF()

MESSAGE(STATUS "Compiling with [${CMAKE_Fortran_COMPILER_ID}] (v${CMAKE_Fortran_COMPILER_VERSION}) fortran compiler using [${FLEXI_INSTRUCTION}] instruction")

# =========================================================================
# COMPILER DEFINITIONS
# =========================================================================

# NVIDIA Compiler
IF (CMAKE_Fortran_COMPILER_ID MATCHES "NVHPC")
  # add definition
  ADD_DEFINITIONS(-DNVHPC)

  # get the compiler versions
  STRING(REPLACE "." ";" CMAKE_Fortran_COMPILER_VERSION_LIST ${CMAKE_Fortran_COMPILER_VERSION})
  LIST(GET CMAKE_Fortran_COMPILER_VERSION_LIST 0 CMAKE_Fortran_COMPILER_VERSION_MAJOR)
  LIST(GET CMAKE_Fortran_COMPILER_VERSION_LIST 1 CMAKE_Fortran_COMPILER_VERSION_MINOR)
  LIST(GET CMAKE_Fortran_COMPILER_VERSION_LIST 2 CMAKE_Fortran_COMPILER_VERSION_PATCH)

  ADD_DEFINITIONS(-DNVHPC_MAJOR=${CMAKE_Fortran_COMPILER_VERSION_MAJOR})
  ADD_DEFINITIONS(-DNVHPC_MINOR=${CMAKE_Fortran_COMPILER_VERSION_MINOR})
  ADD_DEFINITIONS(-DNVHPC_PATCH=${CMAKE_Fortran_COMPILER_VERSION_PATCH})
ENDIF()

# =========================================================================
# COMPILER FLAGS
# =========================================================================

# FFLAGS depend on the compiler
GET_FILENAME_COMPONENT (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

# GNU Compiler Collection (GCC)
IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
  # set Flags (disable lto type warnings due to false positives with MATMUL, which is a known bug)
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -fdefault-double-8 -fbackslash -ffree-line-length-0 -finit-real=snan -finit-integer=snan -Wno-lto-type-mismatch -lstdc++ -DGNU")
    # LUMI has an issue with argument types in MPI(CH) calls
    IF(CMAKE_FQDN_HOST MATCHES "\.can$")
      SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fallow-argument-mismatch")
    ENDIF()
  ENDIF()
  # initialize all variables as signalling NaNs to force the user to correctly initialize these data types
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}     -O3 ${FLEXI_INSTRUCTION} -finline-functions -fstack-arrays")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -pg -O3 ${FLEXI_INSTRUCTION} -finline-functions -fstack-arrays")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -g  -Og -ggdb3 -ffpe-trap=invalid -fbounds-check -fbacktrace  -Wall")
  SET (CMAKE_Fortran_FLAGS_SANITIZE  "${CMAKE_Fortran_FLAGS} -g  -Og -ggdb3 -ffpe-trap=invalid,zero,overflow,denorm -fbounds-check -fbacktrace  -Wall -fsanitize=address,undefined,leak -fno-omit-frame-pointer -Wc-binding-type -Wuninitialized -pedantic")
  # Compile flags depend on the generator
  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Ninja")
  # add flags only for compiling not linking!
  SET (FLEXI_COMPILE_FLAGS "-xf95-cpp-input -fPIC")
  ELSE()
    SET (FLEXI_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -fPIC")
  ENDIF()

# AMD Optimized LLVM/CLANG
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Flang")
  # set Flags
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -std=f2008 -lstdc++ -DFLANG")
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}     -O3 ${FLEXI_INSTRUCTION} -finline-functions ")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -pg -O3 ${FLEXI_INSTRUCTION} -finline-functions ")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -g  -O0 -ggdb3 -ffpe-trap=invalid -fbounds-check -finit-real=snan -fbacktrace  -Wall")
  # Compile flags depend on the generator
  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Ninja")
  # add flags only for compiling not linking!
  SET (FLEXI_COMPILE_FLAGS "-xf95-cpp-input -fPIC")
  ELSE()
    SET (FLEXI_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -fPIC")
  ENDIF()

# Intel Compiler
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Intel")
  # set Flags
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -r8 -i4 -traceback -warn all -shared-intel -lstdc++ -DINTEL")
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}    -O3 ${FLEXI_INSTRUCTION} -qopt-report0 -qopt-report-phase=vec -no-prec-div")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -p -O3 ${FLEXI_INSTRUCTION} -qopt-report0 -qopt-report-phase=vec -no-prec-div")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -g -O0 -fpe0 -traceback -check all,noarg_temp_created,noformat,nooutput_conversion,pointer,uninit -init=snan -init=arrays")
  # Compile flags depend on the generator
  IF(NOT "${CMAKE_GENERATOR}" MATCHES "Ninja")
  # add flags only for compiling not linking!
  SET (FLEXI_COMPILE_FLAGS "-fpp -allow nofpp_comments -assume bscc")
  ELSE()
    SET (FLEXI_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -allow nofpp_comments -assume bscc")
  ENDIF()

# Cray Compiler
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "Cray")
  # set Flags
  IF (NOT DEFINED C_FLAGS_INITIALIZED )
    SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
    SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -f free -s real64 -em -lstdc++ -DCRAY")
  ENDIF()
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS} -O2 -hfp3 -p . -rm")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -O2 -hfp3 -h profile_generate -p . -rm")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -O0 -eD -rm")
  # add flags only for compiling not linking!
  SET (FLEXI_COMPILE_FLAGS "${NINJA_COLOR_DIAGNOSTICS} -F")

# NVIDIA Compiler
ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "NVHPC")
  #IF (NOT DEFINED C_FLAGS_INITIALIZED )
  #  SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
  #  SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -std=f2008 -DFLANG")
  #ENDIF()
  #SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}     -O0 ${FLEXI_INSTRUCTION} -Mfree -Mpreprocess")
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS} -cuda     -O4 -r8 -Mpreprocess -Minfo=accel ${FLEXI_INSTRUCTION}  -lnvToolsExt -L$(CUDA_HOME)/lib64/")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -cuda -pg -O4 -r8 -Mpreprocess ${FLEXI_INSTRUCTION} ")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -cuda -g  -O0 -r8 -Mpreprocess -Minfo=accel -lnvToolsExt -L$(CUDA_HOME)/lib64/")
  # add flags only for compiling not linking!
  SET (FLEXI_COMPILE_FLAGS "-fPIC")

ELSEIF (CMAKE_Fortran_COMPILER_ID MATCHES "PGI")
  #IF (NOT DEFINED C_FLAGS_INITIALIZED )
  #  SET (C_FLAGS_INITIALIZED "yes" CACHE INTERNAL "Flag if compiler flags are already initialized" )
  #  SET (CMAKE_Fortran_FLAGS         "${CMAKE_Fortran_FLAGS} -fdefault-real-8 -std=f2008 -DFLANG")
  #ENDIF()
  #SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS}     -O0 ${FLEXI_INSTRUCTION} -Mfree -Mpreprocess")
  SET (CMAKE_Fortran_FLAGS_RELEASE   "${CMAKE_Fortran_FLAGS} -cuda     -O4 -r8 -Mpreprocess -Minfo=accel ${FLEXI_INSTRUCTION}  -lnvToolsExt -L$(CUDA_HOME)/lib64/")
  SET (CMAKE_Fortran_FLAGS_PROFILE   "${CMAKE_Fortran_FLAGS} -cuda -pg -O4 -r8 -Mpreprocess ${FLEXI_INSTRUCTION}")
  SET (CMAKE_Fortran_FLAGS_DEBUG     "${CMAKE_Fortran_FLAGS} -cuda -g  -O0 -r8 -Mpreprocess -Minfo=accel -lnvToolsExt -L$(CUDA_HOME)/lib64/")
  # add flags only for compiling not linking!
  SET (FLEXI_COMPILE_FLAGS "-fPIC")

ELSE()
  MESSAGE(SEND_ERROR "Unknown compiler")
ENDIF()

# =========================================================================
# Profile-Guided Optimization (PGO)
# =========================================================================
CMAKE_DEPENDENT_OPTION(FLEXI_PERFORMANCE_PGO "Enable profile-guided optimization (Only GNU Compiler supported)" OFF
                                             "FLEXI_PERFORMANCE" OFF)
IF (FLEXI_PERFORMANCE_PGO)
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
    SET(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -fprofile-use")
    SET(CMAKE_Fortran_FLAGS_PROFILE "${CMAKE_Fortran_FLAGS_PROFILE} -fprofile-generate")
  ELSE()
    MESSAGE( SEND_ERROR "Profile-guided optimization (PGO) currently only supported for GNU compiler. Either set FLEXI_PERFORMANCE_PGO=OFF or use the GNU compiler." )
  ENDIF()
ENDIF()

CMAKE_DEPENDENT_OPTION(FLEXI_PERFORMANCE_IPA "Enable Interprocedural Analysis (IPA) and optimization (Only NVHPC Compiler supported)" OFF
                                             "FLEXI_PERFORMANCE" OFF)
IF (FLEXI_PERFORMANCE_IPA)
  IF (CMAKE_Fortran_COMPILER_ID MATCHES "NVHPC")
    SET(CMAKE_Fortran_FLAGS_RELEASE "${CMAKE_Fortran_FLAGS_RELEASE} -Minline=${CMAKE_BINARY_DIR}/flexi.il,reshape,except:getboundarystate")
    SET(CMAKE_Fortran_FLAGS_PROFILE "${CMAKE_Fortran_FLAGS_PROFILE} -Mextract=lib:${CMAKE_BINARY_DIR}/flexi.il")
  ELSE()
    MESSAGE( SEND_ERROR "Interprocedural Analysis (IPA) and optimization  currently only supported for NVHPC compiler. Either set FLEXI_PERFORMANCE_IPA=OFF or use the NVHPC compiler." )
  ENDIF()
ENDIF()

# Save the current compiler flags to the cache every time cmake configures the project.
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_RELEASE)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_PROFILE)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_DEBUG)
MARK_AS_ADVANCED(FORCE CMAKE_Fortran_FLAGS_SANITIZE)
SET(CMAKE_Fortran_FLAGS            "${CMAKE_Fortran_FLAGS}"          CACHE STRING "Default compiler flags" FORCE)
SET(CMAKE_Fortran_FLAGS_RELEASE    "${CMAKE_Fortran_FLAGS_RELEASE}"  CACHE STRING "Release compiler flags" FORCE)
SET(CMAKE_Fortran_FLAGS_PROFILE    "${CMAKE_Fortran_FLAGS_PROFILE}"  CACHE STRING "Profile compiler flags" FORCE)
SET(CMAKE_Fortran_FLAGS_DEBUG      "${CMAKE_Fortran_FLAGS_DEBUG}"    CACHE STRING "Debug compiler flags"   FORCE)
SET(CMAKE_Fortran_FLAGS_SANITIZE   "${CMAKE_Fortran_FLAGS_SANITIZE}" CACHE STRING "Sanitize compiler flags"  FORCE)
