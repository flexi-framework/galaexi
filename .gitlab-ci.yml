# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Settings
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Check module environment
before_script:
  - ulimit -s unlimited
  - module swap gcc nvhpc
  - module list || true
  - python3 -V  || true
  - python2 -V  || true
  - unset CMAKE_GENERATOR

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - build
  - reggie_checkin
  - reggie_nightly
  - reggie_weekly
  - documentation
  - deploy

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates ("hidden jobs")
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the build and testing stage
.default_build_param: &default_build_param
  tags:
    - flexitag
    - siegfried # Ensure GPU on system
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the reggie stage
.default_param: &default_param
  <<: *default_build_param
  allow_failure: false

.reggie_cache: &reggie_cache
  key: "reggie"
  paths: [reggie]
  policy: pull

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for the standard tests (utilizing "extends" to merge the other "artifacts" options with the specific path)
.defaults: &defaults
  extends: .default_param
  needs: [build]
  artifacts:
    paths: [build]
  cache:
    - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}"
      paths: [build]
      policy: pull
  variables:
    FF_ENABLE_JOB_CLEANUP: 1

.defaults_nightly: &defaults_nightly
  <<: *defaults
  rules:
    - if: '$DO_NIGHTLY'

.defaults_weekly: &defaults_weekly
  <<: *defaults
  rules:
    - if: '$DO_WEEKLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "build": Build on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
reggie_download:
  extends: .default_build_param
  artifacts:
    paths: [reggie]
  cache:
    key: "reggie"
    paths: [reggie]
    policy: push
  stage: build
  script:
    - git clone https://github.com/piclas-framework/reggie2.0.git reggie

build:
  extends: .default_build_param
  needs: [reggie_download]
  artifacts:
    paths: [build]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths: [build]
    policy: push
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DLIBS_BUILD_HDF5=OFF
    - make -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin": Run most simple reggie with previous builds on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
run_basic:
  <<: *defaults
  stage: reggie_checkin
  script:
    - cd build
    - python3 ../reggie/reggie.py ../regressioncheck/checks/run_basic/freestream_3D -j 6 -e ./bin/galaexi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - build all specified compile options in "run_basic" with LIBS_BUILD_HDF5=ON
#                         - h-p-convtests
#                         - parabolic testcases
#                         - riemann solver tests
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_all:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python3 ../reggie/reggie.py ../regressioncheck/checks/run_basic -j 6

#timediscs:
#  <<: *defaults_nightly
#  stage: reggie_nightly
#  script:
#    - cd build
#    - python3 ../reggie/reggie.py ../regressioncheck/checks/timedisc -j 6

convtest:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python3 ../reggie/reggie.py ../regressioncheck/checks/convtest -j 6

parabolic:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - python3 ../reggie/reggie.py ../regressioncheck/checks/parabolic -j 6

#riemann:
#  <<: *defaults_nightly
#  stage: reggie_nightly
#  script:
#    - cd build
#    - python3 ../reggie/reggie.py ../regressioncheck/checks/riemann -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run more complex tests, basically complete simulatons
# ----------------------------------------------------------------------------------------------------------------------------------------------------
tgv:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python3 ../reggie/reggie.py ../regressioncheck/checks/tgv -j 6

naca:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - python3 ../reggie/reggie.py ../regressioncheck/checks/naca -j 6

#fv_switch:
#  <<: *defaults_weekly
#  stage: reggie_weekly
#  script:
#    - cd build
#    - python3 ../reggie/reggie.py ../regressioncheck/checks/fv_switch -j 6

#fv_blend:
#  <<: *defaults_weekly
#  stage: reggie_weekly
#  script:
#    - cd build
#    - python3 ../reggie/reggie.py ../regressioncheck/checks/fv_blend -j 6

#channelRANS:
#  <<: *defaults_weekly
#  stage: reggie_weekly
#  script:
#    - cd build
#    - python3 ../reggie/reggie.py ../regressioncheck/checks/channelRANS -j 6

#imperator:
#  <<: *defaults_weekly
#  stage: reggie_weekly
#  script:
#    - cd build
#    - python3 ../reggie/reggie.py ../regressioncheck/checks/preconditioner -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "documentation": Creates doxygen documentation & compiles the documentation creating the *.pdf
# ----------------------------------------------------------------------------------------------------------------------------------------------------
#documentation:
#  extends: .default_build_param
#  stage: documentation
#  rules:
#    - if: '$DO_DEPLOY'
#    - if: '$DO_WEEKLY'
#  script:
#    - cd doc/doxygen
#    - ./builddoxy.sh
#  artifacts:
#    paths:
#      - src
#      - doc/doxygen
#  cache:
#    key: "${CI_COMMIT_REF_SLUG}-DOC"
#    paths: [doc/doxygen]
#    policy: push
#
#userguide:
#  extends: .default_build_param
#  stage: documentation
#  rules:
#    - if: '$DO_DEPLOY'
#    - if: '$DO_WEEKLY'
#  script:
#    - cd doc/userguide
#    - make
#  artifacts:
#    paths:
#      - doc/userguide
#  cache:
#    key: "${CI_COMMIT_REF_SLUG}-USERGUIDE"
#    paths: [doc/userguide]
#    policy: push

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "deploy": Copies the doxygen documentation and userguide *.pdf to the homepage server & copies the repository to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
#homepage:
#  extends: .default_build_param
#  stage: deploy
#  rules:
#    - if: '$DO_DEPLOY && $CI_SERVER_URL =~ /.*\.iag\.uni-stuttgart\.de$/'
#  cache:
#    - key: "${CI_COMMIT_REF_SLUG}-DOC"
#      paths: [doc/doxygen]
#      policy: pull
#    - key: "${CI_COMMIT_REF_SLUG}-USERGUIDE"
#      paths: [doc/userguide]
#      policy: pull
#  variables:
#    FF_ENABLE_JOB_CLEANUP: 1
#  script:
#    - cd doc
#    - rsync --recursive --delete doxygen/doxygen flexi@euler:homepage/
#    - rsync --recursive --delete userguide       flexi@euler:homepage/

github:
  extends: .default_build_param
  stage: deploy
  rules:
    - if: '$DO_DEPLOY && $CI_SERVER_URL =~ /.*\.iag\.uni-stuttgart\.de$/'
  variables:
    FF_ENABLE_JOB_CLEANUP: 1
  script:
    - git clone --single-branch git@gitlab.iag.uni-stuttgart.de:flexi/galaexi.git galaexi_github
    - cd galaexi_github
    - git push --mirror git@github.com:flexi-framework/galaexi.git
